{
	const char *f =
		"varying float x, y, z;"
		"uniform float r_mod;"
		"float rand(float s, float r) { return mod(mod(s, r + r_mod) * 112341, 1); }"
		"void main() {"
		"	gl_FragColor = vec4(rand(gl_FragCoord.x, x), rand(gl_FragCoord.y, y), rand(gl_FragCoord.z, z), 1);"
		"}";
	const char *v =
		"varying float x, y, z;"
		"void main() {"
		"	gl_Position = ftransform();"
		"	x = gl_Position.x; y = gl_Position.y; z = gl_Position.z;"
		"	x += y; y -= x; z += x - y;"
		"}";











				"attribute vec3 vertexPosition_modelspace;"
		"void main(){"
		"gl_Position.xyz = vertexPosition_modelspace;"
		"gl_Position.w = 1.0;"
		"}";




			"void main(){"
		"gl_FragColor = vec4(0, 1, 0,1);"
		"}";





####################################
	
	vec2 point = vec2(500,500);
	vec2 pos = vec2(gl_FragCoord.x, gl_FragCoord.y);

	float dist = length(pos - point* (sin(time * 4.0f) + 1.0f) / 2.0f );
	
	gl_FragColor.b = dist / 800;





	
	gl_FragColor.rgb = texture(tex, Texcoord) * vec3(Color);


		vec2 p = Position;
	float brightness = checkerboard(p,20.0);
	gl_FragColor.rgb = vec3(brightness);
	gl_FragColor.a = 1.0;






	
	vec4 diffuseColor = texture2D(tex, texCoord);
	vec3 normalMap = texture2D(normal, texCoord).rgb;

	vec3 lightDir = vec3(lightPos.xy - (gl_FragCoord.xy / Resolution.xy), lightPos.z);
	lightDir.x *= Resolution.x / Resolution.y;

	float D = length(lightDir);

	vec3 L = normalize(lightDir);

	vec3 diffuse = (lightColor.rgb * lightColor.a) * max(dot(N,L),0.0);
	vec3 ambient = ambientColor.rgb * ambientColor.a;

	float attenuation = 1.0 / (fallOff.x + (fallOff.y*D) + (fallOff.x*D*D));

	vec3 intensity = ambient + diffuse * attenuation;
	vec3 finalColor = diffuseColor.rgb * intensity;

	gl_FragColor = Color * vec4(finalColor, diffuseColor.a);
