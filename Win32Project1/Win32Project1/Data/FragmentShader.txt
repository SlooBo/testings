uniform float time;
uniform vec3 lightPos;
uniform vec2 Resolution;
uniform vec4 lightColor;
uniform vec4 ambientColor;
uniform vec3 fallOff;

uniform float unifAlpha;

uniform sampler2D tex;
uniform sampler2D norm;	

varying vec3 Color;
varying vec3 Position;
varying vec2 Texcoord;

void main()
{
/*
	vec4 diffuseColor = texture2D(tex, Texcoord);
	vec3 normalMap = texture2D(norm, Texcoord).rgb;

	vec3 lightDir = vec3(lightPos.xy - (gl_FragCoord.xy / Resolution.xy), lightPos.z);

	lightDir.x *= Resolution.x / Resolution.y;

	float D = length(lightDir);

	vec3 N = normalize(normalMap * 2.0 - 1.0);
	vec3 L = normalize(lightDir);

	vec3 diffuse = (lightColor.rgb * lightColor.a) * max(dot(N,L),0.0);
	vec3 ambient = ambientColor.rgb * ambientColor.a;

	float attenuation = 1.0 / (fallOff.x + (fallOff.y*D) + (fallOff.x*D*D));

	vec3 intensity = ambient + diffuse * attenuation;
	vec3 finalColor = diffuseColor.rgb * intensity;

	gl_FragColor = vec4(finalColor, diffuseColor.a);
*/
	vec4 diffuseColor = texture2D(tex, Texcoord);

	gl_FragColor.rgb = diffuseColor;
	gl_FragColor.a = unifAlpha;

}