attribute vec3 position;
attribute vec3 color;
attribute vec2 texcoord;

varying vec3 Color;
varying vec3 Position;
varying vec2 Texcoord;
varying vec3 LightPos;
varying float LightIntensity;

uniform vec3 lightPos;

uniform mat4 unifProjection;
uniform mat4 unifWorld;
uniform mat4 unifView;
uniform mat4 unifNormal;

const float specularContribution = 0.1;
const float diffuseContribution = 1.0 - specularContribution;

void main()
{
//gl_ModelViewMatrix == unifView
//gl_Vertex == Position
	vec4 ecPosition = unifView * vec4(Position, 1.0);	

	vec3 tnorm = normalize(gl_NormalMatrix * gl_Normal);
	vec3 lightVec = normalize(lightPos - ecPosition);
	vec3 reflectVec = reflect(-lightVec, tnorm);
	vec3 viewVec = normalize(-ecPosition);

	float spec = clamp(dot(reflectVec, viewVec), 0.0, 1.0);
	spec = pow(spec, 16.0);

	LightIntensity = diffuseContribution * max(dot(lightVec, tnorm), 0.0) + specularContribution * spec;

	Texcoord = texcoord;
	Position = position;
	Color = color;

	gl_Position = unifProjection * unifView * unifWorld * vec4(Position, 1.0);
}
